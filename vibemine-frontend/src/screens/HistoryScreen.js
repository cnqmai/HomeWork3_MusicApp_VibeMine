// src/screens/HistoryScreen.js
import React, { useState, useCallback } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  ActivityIndicator,
  RefreshControl,
  Alert,
  Platform,
  TouchableOpacity,
  ScrollView, // Th√™m ScrollView v√†o imports
} from 'react-native';
import api from '../api/api';
import { useFocusEffect } from '@react-navigation/native';
import { useMusicPlayer } from '../hooks/useMusicPlayer';
import HistoryItem from '../components/HistoryItem'; // Import component m·ªõi
import MiniPlayer from '../components/MiniPlayer'; // Import MiniPlayer
import { SafeAreaView } from 'react-native-safe-area-context';

export default function HistoryScreen({ navigation }) {
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const { playTrack, userId } = useMusicPlayer();

  const fetchHistory = useCallback(async (showLoading = true) => {
    if (showLoading && history.length === 0) setLoading(true); // Ch·ªâ loading n·∫øu list r·ªóng
    else if (!showLoading) setIsRefreshing(true);

    try {
      console.log("HistoryScreen: Fetching history...");
      const { data } = await api.getHistory(userId, 100);
      setHistory(data || []);
    } catch (error) {
      console.error("HistoryScreen: Load history error:", error);
      if (showLoading) Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i l·ªãch s·ª≠ nghe nh·∫°c.");
    } finally {
      if (showLoading) setLoading(false);
      setIsRefreshing(false);
    }
  }, [userId, history.length]); // Th√™m history.length

  // T·∫£i d·ªØ li·ªáu khi m√†n h√¨nh ƒë∆∞·ª£c focus
  useFocusEffect(
    useCallback(() => {
      fetchHistory(history.length === 0);
    }, [fetchHistory])
  );

  // X·ª≠ l√Ω khi nh·∫•n v√†o m·ªôt m·ª•c l·ªãch s·ª≠
  const handleItemPress = useCallback(async (historyItem) => {
      if (!historyItem || !historyItem.trackId) return;

      console.log(`HistoryScreen: Attempting to play track ${historyItem.trackId}`);
       try {
           // G·ªçi API l·∫•y chi ti·∫øt track (v√¨ HistoryDTO kh√¥ng ƒë·ªß info)
           setLoading(true); // Hi·ªÉn th·ªã loading t·∫°m th·ªùi
           const { data: trackDetail } = await api.getTrackDetail(historyItem.trackId);
           if (trackDetail && trackDetail.track) {
                // Ki·ªÉm tra xem b√†i h√°t c√≥ localUri kh√¥ng
                const downloaded = await getDownloadedTracks();
                const localUri = downloaded[trackDetail.track.id.toString()];
               
                playTrack(trackDetail.track, localUri); // Ph√°t b√†i h√°t
                navigation.navigate('Player');
           } else {
               Alert.alert("L·ªói", "Kh√¥ng t√¨m th·∫•y th√¥ng tin b√†i h√°t n√†y (c√≥ th·ªÉ ƒë√£ b·ªã x√≥a).");
           }
       } catch (e) {
            console.error("Error fetching track detail from history:", e);
           Alert.alert("L·ªói", "Kh√¥ng th·ªÉ ph√°t b√†i h√°t n√†y.");
       } finally {
            setLoading(false);
       }
  }, [playTrack, navigation]); // Th√™m dependencies

  // Render Item
  const renderHistoryItem = ({ item }) => (
    <HistoryItem
      item={item}
      onPress={() => handleItemPress(item)}
    />
  );

  return (
    <SafeAreaView style={styles.container} edges={['right', 'left']}>
      <Text style={styles.title}>üïò L·ªãch s·ª≠ nghe nh·∫°c</Text>
      
      {/* Hi·ªÉn th·ªã loading to√†n m√†n h√¨nh n·∫øu ƒëang t·∫£i l·∫ßn ƒë·∫ßu */}
      {loading && history.length === 0 ? (
        <View style={styles.center}>
          <ActivityIndicator size="large" color="#9C27B0" />
        </View>
      ) : history.length === 0 ? ( // Hi·ªÉn th·ªã list r·ªóng
        <ScrollView 
            contentContainerStyle={styles.center}
            refreshControl={
                 <RefreshControl refreshing={isRefreshing} onRefresh={fetchHistory} colors={["#9C27B0"]}/>
            }
        >
          <Text style={styles.emptyText}>B·∫°n ch∆∞a nghe b√†i h√°t n√†o.</Text>
        </ScrollView>
      ) : ( // Hi·ªÉn th·ªã FlatList
        <FlatList
          data={history}
          renderItem={renderHistoryItem}
          keyExtractor={(item, index) => `${item.trackId}-${item.playedAt}-${index}`}
          contentContainerStyle={styles.list}
          refreshControl={
            <RefreshControl refreshing={isRefreshing} onRefresh={() => fetchHistory(false)} colors={["#9C27B0"]} />
          }
        />
      )}
      
      {/* MiniPlayer n·∫±m tr√™n c√πng */}
      <MiniPlayer navigation={navigation} />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8',
  },
  center: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingBottom: 50, // ƒê·∫©y l√™n tr√™n MiniPlayer
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    paddingHorizontal: 20,
    paddingVertical: 15,
    marginTop: 40,
    color: '#333',
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
    // X√≥a paddingTop v√¨ ƒë√£ c√≥ SafeAreaView
  },
  list: {
    paddingBottom: 120, // TƒÉng padding bottom cho MiniPlayer
  },
  emptyText: {
    textAlign: 'center',
    fontSize: 16,
    color: '#777',
  },
});