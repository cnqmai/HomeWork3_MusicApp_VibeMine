import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  Dimensions,
  RefreshControl,
  ActivityIndicator,
  TextInput, // S·ª≠ d·ª•ng TextInput c∆° b·∫£n
  TouchableOpacity,
  ScrollView, // S·ª≠ d·ª•ng ScrollView cho n·ªôi dung ch√≠nh
  Alert, // Th√™m Alert
  Platform, // Th√™m Platform
} from 'react-native';
// import { Searchbar } from 'react-native-paper'; // B·ªè comment n·∫øu mu·ªën d√πng Searchbar c·ªßa Paper
import { Ionicons } from '@expo/vector-icons';
import TrackItem from '../components/TrackItem';
import MiniPlayer from '../components/MiniPlayer';
import api from '../api/api';
import { useMusicPlayer } from '../hooks/useMusicPlayer';
import { getDownloadedTracks } from '../utils/DownloadManager';
import { useFocusEffect } from '@react-navigation/native';
import debounce from 'lodash.debounce';

const { width } = Dimensions.get('window');
const userId = 1; // Gi·∫£ s·ª≠ userId

// Danh s√°ch th·ªÉ lo·∫°i m·∫´u (c√≥ th·ªÉ l·∫•y t·ª´ API n·∫øu backend h·ªó tr·ª£)
const GENRES = ['Indie', 'V-Pop', 'Rap', 'R&B', 'Ballad', 'EDM', 'Acoustic'];

export default function HomeScreen({ navigation }) {
  const [tracks, setTracks] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [loading, setLoading] = useState(false); // Loading cho danh s√°ch ch√≠nh + t√¨m ki·∫øm
  const [isRefreshing, setIsRefreshing] = useState(false); // State ri√™ng cho RefreshControl
  const [loadingTrending, setLoadingTrending] = useState(false);
  const [trending, setTrending] = useState([]);
  const { playTrack } = useMusicPlayer();
  const [downloadedTracksMap, setDownloadedTracksMap] = useState({});

  // --- T·∫£i d·ªØ li·ªáu ---
  const loadDownloadedStatus = useCallback(async () => {
    // console.log("HomeScreen: Loading download statuses...");
    const map = await getDownloadedTracks();
    setDownloadedTracksMap(map);
  }, []);

  const loadTracks = useCallback(async (showLoading = true) => {
    // console.log("HomeScreen: Loading tracks...");
    if (showLoading && tracks.length === 0) setLoading(true); // Ch·ªâ hi·ªán loading to√†n m√†n h√¨nh l·∫ßn ƒë·∫ßu
    try {
      const { data } = await api.getTracks(); // L·∫•y to√†n b·ªô
      setTracks(data || []);
    } catch (error) {
      console.error('Load tracks error:', error);
      if (showLoading) Alert.alert("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√†i h√°t.");
    } finally {
      if (showLoading) setLoading(false);
    }
  }, [tracks.length]);

  const loadTrending = useCallback(async () => {
    // console.log("HomeScreen: Loading trending...");
    setLoadingTrending(true);
    try {
      const { data } = await api.getTrending(5);
      setTrending(data || []);
    } catch (error) { console.error('Load trending error:', error); }
    finally { setLoadingTrending(false); }
  }, []);

  // --- T√¨m ki·∫øm ---
  const performSearch = useCallback(async (query) => {
    // console.log(`HomeScreen: Performing search for "${query}"`);
    setLoading(true); // Lu√¥n set loading khi search
    try {
      const { data } = await api.searchTracks(query);
      setTracks(data || []);
    } catch (error) {
      console.error('Search error:', error);
      Alert.alert("L·ªói", "T√¨m ki·∫øm th·∫•t b·∫°i.");
    } finally { setLoading(false); }
  }, []);

  const debouncedSearch = useCallback(debounce(performSearch, 400), [performSearch]);

  const handleSearchChange = (query) => {
    setSearchQuery(query);
    const trimmedQuery = query.trim();
    if (trimmedQuery.length > 0) {
      debouncedSearch(trimmedQuery);
    } else if (trimmedQuery.length === 0 && query.length === 0) {
      // console.log("HomeScreen: Search cleared, loading initial tracks.");
      loadTracks(false); // Load l·∫°i kh√¥ng hi·ªÉn th·ªã loading to√†n m√†n h√¨nh
    }
  };

  // --- Effects ---
  useEffect(() => {
    loadTracks();
    loadTrending();
  }, []);

  useFocusEffect(useCallback(() => {
    // console.log("HomeScreen focused, reloading download statuses.");
    loadDownloadedStatus();
  }, [loadDownloadedStatus]));

  // --- ƒêi·ªÅu h∆∞·ªõng ---
  const navigateToGenre = (genreName) => {
      navigation.navigate('CategoryTracks', {
          type: 'genre',
          name: genreName,
      });
  };

  // --- Render ---
  const renderTrack = ({ item, index }) => ( // Th√™m index ƒë·ªÉ d√πng key
    <TrackItem
      key={`track-${item.id}-${index}`} // Key unique h∆°n
      track={item}
      onPress={(trackData, uri) => {
        // console.log(`HomeScreen: Playing ${trackData.title}, localUri: ${uri}`);
        playTrack(trackData, uri);
        navigation.navigate('Player');
      }}
      onDownloadsChange={loadDownloadedStatus}
      // isFavorite={...} // Add favorite logic here
      // onToggleFavorite={...}
    />
  );

   const renderGenreItem = ({ item }) => (
     <TouchableOpacity
       style={styles.genreButton}
       onPress={() => navigateToGenre(item)}
     >
       <Text style={styles.genreButtonText}>{item}</Text>
     </TouchableOpacity>
   );

  // X·ª≠ l√Ω refresh
  const onRefresh = useCallback(async () => {
    // console.log("HomeScreen: Refreshing..."); // Debug log
    setIsRefreshing(true); // B·∫≠t indicator c·ªßa RefreshControl
    try {
        // T·∫£i l·∫°i ƒë·ªìng th·ªùi
        await Promise.all([
            loadTracks(false), // Kh√¥ng b·∫≠t loading to√†n m√†n h√¨nh
            loadTrending(),
            loadDownloadedStatus()
        ]);
    } catch (error) {
         console.error("Error during refresh:", error);
         // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o l·ªói nh·ªè ·ªü ƒë√¢y
    } finally {
        setIsRefreshing(false); // T·∫Øt indicator
    }
  }, [loadTracks, loadTrending, loadDownloadedStatus]);

  // --- Return JSX ---
  return (
    // **** S·ª¨A L·ªñI: B·ªåC TO√ÄN B·ªò B·∫∞NG VIEW ****
    <View style={styles.outerContainer}>
        <ScrollView
            style={styles.scrollView}
            contentContainerStyle={styles.scrollViewContent}
            refreshControl={
                <RefreshControl refreshing={isRefreshing} onRefresh={onRefresh} colors={["#9C27B0"]}/>
            }
            keyboardShouldPersistTaps="handled" // ƒê·ªÉ c√≥ th·ªÉ b·∫•m n√∫t khi b√†n ph√≠m hi·ªán
            >
            <TextInput
                placeholder="T√¨m ki·∫øm b√†i h√°t, ca sƒ©..."
                onChangeText={handleSearchChange}
                value={searchQuery}
                style={styles.searchBar}
                placeholderTextColor="#888"
            />

            {/* Trending Section */}
            <Text style={styles.sectionTitle}>üéØ Trending</Text>
            {loadingTrending ? (
                <ActivityIndicator style={styles.horizontalLoader} color="#9C27B0" />
            ) : trending.length > 0 ? (
                <FlatList
                    data={trending}
                    renderItem={renderTrack}
                    keyExtractor={(item) => `trending-${item.id}`}
                    horizontal
                    showsHorizontalScrollIndicator={false}
                    contentContainerStyle={styles.horizontalList}
                />
            ) : (
                <Text style={styles.emptyTextSmall}>Kh√¥ng c√≥ d·ªØ li·ªáu trending.</Text>
            )}

            {/* Genre Section */}
            <Text style={styles.sectionTitle}>üéµ Th·ªÉ lo·∫°i</Text>
            <FlatList
                data={GENRES}
                renderItem={renderGenreItem}
                keyExtractor={(item) => `genre-${item}`}
                horizontal
                showsHorizontalScrollIndicator={false}
                contentContainerStyle={styles.horizontalList} // D√πng chung style list ngang
            />


            {/* Main Track List Section */}
            <Text style={styles.sectionTitle}>üéß {searchQuery ? 'K·∫øt qu·∫£ t√¨m ki·∫øm' : 'G·ª£i √Ω cho b·∫°n'}</Text>
            {loading && tracks.length === 0 ? ( // Loading l·∫ßn ƒë·∫ßu/t√¨m ki·∫øm khi list r·ªóng
                <View style={styles.centerLoader}>
                    <ActivityIndicator size="large" color="#9C27B0" />
                </View>
            ) : tracks.length === 0 ? ( // List r·ªóng sau khi load xong
                <Text style={styles.emptyText}>{searchQuery ? 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p.' : 'Kh√¥ng c√≥ b√†i h√°t n√†o.'}</Text>
            ): (
                // Render danh s√°ch tracks (d√πng map)
                <View style={styles.trackListContainer}>
                    {tracks.map((item, index) => renderTrack({ item, index }))}
                </View>
            )}

            {/* Kho·∫£ng tr·ªëng d∆∞·ªõi c√πng ƒë·ªÉ kh√¥ng b·ªã che b·ªüi MiniPlayer */}
            {/* ƒê√£ chuy·ªÉn v√†o contentContainerStyle c·ªßa ScrollView */}

        </ScrollView>

        {/* Mini Player ƒë·∫∑t ·ªü ƒë√¢y, n·∫±m tr√™n ScrollView */}
        <MiniPlayer navigation={navigation} />
    </View> // **** K·∫æT TH√öC VIEW CHA ****
  );
}

// --- STYLES ---
const styles = StyleSheet.create({
  outerContainer: { // Style cho View cha bao b·ªçc t·∫•t c·∫£
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollView: { // Style cho ScrollView
    flex: 1, // ƒê·ªÉ ScrollView chi·∫øm kh√¥ng gian c√≤n l·∫°i (tr√™n MiniPlayer)
  },
  scrollViewContent: { // Style cho n·ªôi dung b√™n trong ScrollView
     paddingBottom: 80, // TƒÉng padding bottom ƒë·ªß cho MiniPlayer
  },
  searchBar: {
    marginHorizontal: 16,
    marginTop: 15,
    marginBottom: 10, // TƒÉng margin bottom
    paddingHorizontal: 15,
    paddingVertical: Platform.OS === 'ios' ? 12 : 9,
    backgroundColor: '#fff',
    borderRadius: 25,
    fontSize: 16,
    elevation: 2,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    borderWidth: 1, // Th√™m border nh·∫π
    borderColor: '#eee',
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700', // ƒê·∫≠m h∆°n ch√∫t
    marginLeft: 16,
    marginTop: 20,
    marginBottom: 10,
    color: '#333',
  },
   horizontalLoader: { // Style cho loading indicator c·ªßa list ngang
     height: 100, // Chi·ªÅu cao t·∫°m th·ªùi ƒë·ªÉ gi·ªØ layout
     justifyContent: 'center',
     alignItems: 'center',
   },
  horizontalList: { // Style chung cho FlatList ngang
    paddingLeft: 16,
    paddingRight: 8, // ƒê·ªß ƒë·ªÉ th·∫•y item cu·ªëi
  },
   // --- Genre Styles ---
   genreList: { // D√πng chung horizontalList style
     paddingLeft: 16,
     paddingRight: 8,
     marginBottom: 10,
   },
   genreButton: {
     backgroundColor: '#fff', // N·ªÅn tr·∫Øng
     paddingHorizontal: 18,
     paddingVertical: 10,
     borderRadius: 20,
     marginRight: 10,
     borderWidth: 1, // Th√™m border
     borderColor: '#ddd',
     elevation: 1, // Th√™m shadow nh·∫π
     shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 1,
   },
   genreButtonText: {
     fontSize: 14,
     fontWeight: '500',
     color: '#555', // M√†u ch·ªØ ƒë·∫≠m h∆°n
   },
   // --- Track List Styles ---
   trackListContainer: {
     paddingBottom: 5, // Kh√¥ng c·∫ßn nhi·ªÅu padding v√¨ ƒë√£ c√≥ ·ªü ScrollView
   },
  centerLoader: {
      marginTop: 50,
      alignItems: 'center',
  },
  emptyText: {
      textAlign: 'center',
      marginTop: 50,
      fontSize: 16,
      color: '#666',
      paddingHorizontal: 20,
  },
   emptyTextSmall: {
       marginLeft: 16,
       fontSize: 14,
       color: '#888',
       marginVertical: 10, // Th√™m margin d·ªçc
   },
});