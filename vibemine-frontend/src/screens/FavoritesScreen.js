import React, { useState, useEffect, useCallback } from 'react';
import {
  View,
  Text,
  FlatList,
  StyleSheet,
  RefreshControl,
  ActivityIndicator,
  Alert, // Th√™m Alert
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import TrackItem from '../components/TrackItem';
import api from '../api/api';
import { useMusicPlayer } from '../hooks/useMusicPlayer';
import { storage } from '../utils/storage';
import { useFocusEffect } from '@react-navigation/native';
import { getDownloadedTracks } from '../utils/DownloadManager'; // Import download manager

export default function FavoritesScreen({ navigation }) {
  const [favorites, setFavorites] = useState([]);
  const [loading, setLoading] = useState(false); // Loading cho refresh/sync
  const [initialLoading, setInitialLoading] = useState(true); // Loading l·∫ßn ƒë·∫ßu
  const { playTrack, currentTrack } = useMusicPlayer(); // L·∫•y currentTrack ƒë·ªÉ ki·ªÉm tra favorite
  const userId = 1;
  const [downloadedTracksMap, setDownloadedTracksMap] = useState({});

   // --- T·∫£i d·ªØ li·ªáu ---
   // T·∫£i danh s√°ch ƒë√£ t·∫£i v·ªÅ
   const loadDownloadedStatus = useCallback(async () => {
    // console.log("FavoritesScreen: Loading download statuses..."); // Debug log
    const map = await getDownloadedTracks();
    setDownloadedTracksMap(map);
  }, []);

  // H√†m t·∫£i d·ªØ li·ªáu t·ª´ API v√† c·∫≠p nh·∫≠t local storage
  const fetchAndSyncFavorites = useCallback(async (showLoadingIndicator = true) => {
    if (showLoadingIndicator) {
      setLoading(true);
    }
    try {
      // console.log("FavoritesScreen: Fetching favorites from API..."); // Debug log
      const { data } = await api.getUserFavorites(userId);
      const validData = Array.isArray(data) ? data : []; // ƒê·∫£m b·∫£o l√† m·∫£ng
      setFavorites(validData);
      await storage.saveFavorites(validData);
      // console.log("FavoritesScreen: Favorites fetched and saved:", validData.length); // Debug log
    } catch (error) {
      console.error('FavoritesScreen: Load favorites API error:', error);
      // Gi·ªØ l·∫°i d·ªØ li·ªáu c≈© n·∫øu API l·ªói? Ho·∫∑c th√¥ng b√°o l·ªói
      // Alert.alert("L·ªói", "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t danh s√°ch y√™u th√≠ch.");
    } finally {
      if (showLoadingIndicator) {
        setLoading(false);
      }
       // Lu√¥n t·∫Øt initialLoading sau l·∫ßn fetch ƒë·∫ßu ti√™n, k·ªÉ c·∫£ khi l·ªói
       setInitialLoading(false);
    }
  }, [userId]);

  // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu v√† khi focus
  useFocusEffect(
    useCallback(() => {
      let isActive = true;

      const loadInitialData = async () => {
        // console.log("FavoritesScreen focused, loading initial data..."); // Debug log
        if (isActive) setInitialLoading(true); // Ch·ªâ set initialLoading khi m√†n h√¨nh active

        // 1. T·∫£i tr·∫°ng th√°i download
        await loadDownloadedStatus();

        // 2. T·∫£i t·ª´ AsyncStorage tr∆∞·ªõc
        const localFavorites = await storage.getFavorites();
        // console.log("FavoritesScreen: Loaded local favorites:", localFavorites?.length); // Debug log
        if (isActive && Array.isArray(localFavorites) && localFavorites.length > 0) {
          setFavorites(localFavorites);
           // T·∫Øt initial loading n·∫øu ƒë√£ c√≥ d·ªØ li·ªáu local
           setInitialLoading(false);
        } else if (isActive) {
            // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu local, v·∫´n set m·∫£ng r·ªóng v√† ƒë·ª£i API
            setFavorites([]);
        }


        // 3. Fetch t·ª´ API ƒë·ªÉ ƒë·ªìng b·ªô (ch·∫°y ng·∫ßm n·∫øu ƒë√£ c√≥ local data)
        // Ch·ªâ hi·ªán loading n·∫øu ch∆∞a c√≥ data local
        await fetchAndSyncFavorites(localFavorites.length === 0);
      };

      loadInitialData();

      return () => {
        isActive = false;
        // console.log("FavoritesScreen unfocused/unmounted."); // Debug log
      };
    }, [fetchAndSyncFavorites, loadDownloadedStatus]) // Th√™m loadDownloadedStatus
  );

    // --- X·ª≠ l√Ω b·ªè y√™u th√≠ch ---
    const handleToggleFavorite = useCallback(async (trackId) => {
        // V√¨ ƒë√¢y l√† m√†n h√¨nh Favorites, nh·∫•n n√∫t tim nghƒ©a l√† b·ªè y√™u th√≠ch
        Alert.alert(
            "B·ªè y√™u th√≠ch",
            `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${favorites.find(t=>t.id === trackId)?.title || 'b√†i h√°t n√†y'}" kh·ªèi danh s√°ch y√™u th√≠ch?`,
            [
                { text: "H·ªßy", style: "cancel" },
                {
                    text: "X√≥a",
                    style: "destructive",
                    onPress: async () => {
                        const previousFavorites = [...favorites]; // L∆∞u state c≈© ƒë·ªÉ ho√†n t√°c
                        try {
                            // C·∫≠p nh·∫≠t giao di·ªán tr∆∞·ªõc (Optimistic Update)
                            setFavorites(prev => prev.filter(t => t.id !== trackId));
                             console.log(`FavoritesScreen: Optimistically removed favorite ${trackId}`);

                            // G·ªçi API - Gi·∫£ s·ª≠ toggleFavorite tr·∫£ v·ªÅ boolean ho·∫∑c throw error
                            // C·∫ßn ƒëi·ªÅu ch·ªânh API call n·∫øu backend tr·∫£ v·ªÅ kh√°c
                             // await api.toggleFavorite(userId, trackId); // Ho·∫∑c d√πng API x√≥a ri√™ng
                             await api.removeFromFavorites(userId, trackId); // D√πng API delete
                             console.log(`FavoritesScreen: API call successful for removing favorite ${trackId}`);


                            // C·∫≠p nh·∫≠t AsyncStorage sau khi API th√†nh c√¥ng
                            const updatedFavorites = previousFavorites.filter(t => t.id !== trackId);
                            await storage.saveFavorites(updatedFavorites);
                            console.log(`FavoritesScreen: Removed favorite ${trackId}, updated storage.`);

                        } catch (error) {
                            console.error('FavoritesScreen: Error removing favorite:', error);
                             // Ho√†n t√°c UI n·∫øu c√≥ l·ªói
                             setFavorites(previousFavorites);
                             Alert.alert("L·ªói", "Kh√¥ng th·ªÉ b·ªè y√™u th√≠ch b√†i h√°t n√†y. Vui l√≤ng th·ª≠ l·∫°i.");
                        }
                    },
                },
            ]
        );
    }, [favorites, userId]); // Ph·ª• thu·ªôc v√†o favorites v√† userId


  // --- Render Item ---
  const renderTrack = ({ item }) => (
    <TrackItem
      track={item}
      onPress={(trackData, uri) => { // Nh·∫≠n track v√† uri
        // console.log(`FavoritesScreen: Playing ${trackData.title}, localUri: ${uri}`); // Debug log
        playTrack(trackData, uri);
        navigation.navigate('Player');
      }}
      isFavorite={true} // Lu√¥n l√† true ·ªü m√†n h√¨nh n√†y
      onToggleFavorite={() => handleToggleFavorite(item.id)} // H√†m x·ª≠ l√Ω b·ªè y√™u th√≠ch
      onDownloadsChange={loadDownloadedStatus} // C·∫≠p nh·∫≠t tr·∫°ng th√°i download
    />
  );

  // --- X·ª≠ l√Ω Refresh ---
  const onRefresh = useCallback(() => {
     // Khi refresh, t·∫£i l·∫°i c·∫£ tr·∫°ng th√°i download v√† danh s√°ch y√™u th√≠ch
    // console.log("FavoritesScreen: Refreshing..."); // Debug log
    setLoading(true);
     Promise.all([loadDownloadedStatus(), fetchAndSyncFavorites(false)]) // fetch kh√¥ng c·∫ßn set loading n·ªØa
        .finally(() => setLoading(false));
  }, [fetchAndSyncFavorites, loadDownloadedStatus]);

  // --- Render Loading ban ƒë·∫ßu ---
   if (initialLoading) {
    return (
      <SafeAreaView style={[styles.container, styles.center]} edges={['right', 'left']}>
        <ActivityIndicator size="large" color="#9C27B0" />
      </SafeAreaView>
    );
  }

  // --- Render ch√≠nh ---
  return (
    <SafeAreaView style={styles.container} edges={['right', 'left']}>
      <Text style={styles.title}>üíñ B√†i h√°t y√™u th√≠ch</Text>
      {(favorites.length === 0 && !loading) ? (
           <Text style={styles.emptyText}>Ch∆∞a c√≥ b√†i h√°t y√™u th√≠ch n√†o.</Text>
       ) : (
          <FlatList
            data={favorites}
            renderItem={renderTrack}
            keyExtractor={(item) => item.id.toString()} // Key ƒë∆°n gi·∫£n l√† ƒë·ªß n·∫øu ID unique
            contentContainerStyle={styles.list}
            refreshControl={
              <RefreshControl refreshing={loading} onRefresh={onRefresh} colors={["#9C27B0"]} />
            }
          />
       )}
        {/* Tab Navigator qu·∫£n l√Ω MiniPlayer */}
    </SafeAreaView>
  );
}

// --- STYLES ---
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f8f8', // M√†u n·ªÅn s√°ng h∆°n ch√∫t
  },
  center: {
    flex: 1, // Chi·∫øm h·∫øt kh√¥ng gian
    justifyContent: 'center',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    paddingHorizontal: 20,
    paddingVertical: 15,
    marginTop: 40, // Add marginTop to push title down
    color: '#333',
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  list: {
    paddingTop: 10, // Th√™m padding top cho list
    paddingBottom: 80, // TƒÉng padding bottom n·∫øu c√≥ MiniPlayer ·ªü layout cha
  },
  emptyText: {
      textAlign: 'center',
      marginTop: 60, // TƒÉng margin top
      fontSize: 16,
      color: '#777', // M√†u ch·ªØ ƒë·∫≠m h∆°n ch√∫t
  },
});